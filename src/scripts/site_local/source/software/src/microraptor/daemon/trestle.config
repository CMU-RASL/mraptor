#!/usr/bin/perl
# $Id: trestle.config,v 1.7 2005/09/01 16:05:15 brennan Exp $
#
# PROJECT:      TRESTLE
# DESCRIPTION:  This is the config file to use on the live system.

######################################################################

# Set the mode of operation here, and reload the config (usually be
# restarting a claw which takes this config as its --config argument)
#
# See the if/elsif  tree below the machine definitions for the
# specific settings.
#$autoMode = "teleop";
#$autoMode = "for";
#$autoMode = "autonomous";
#$autoMode = "mixed";
#$autoMode = "system";
$autoMode = "sia";

# TODO: add dummy -u to kremlin when in teleop, and don't run kremlinExp

$username = $ENV{USER};
$tag = $ENV{DIRA_TAG};

# Change this for each user
$suffix = ".${username}.${tag}";

$layers_on_k = 0;

# We're assuming a common setup on all robot machines
$dirroot = "/home/demo";
$bindir = "${dirroot}/binaries";
$datadir = "${dirroot}/data";
$cfgdir = "${dirroot}/configs";
$wavdir = "${dirroot}/wavs";
$bodies = "--bodies $cfgdir/trestle_bodies.config$suffix";
$cameras = "--cameras $cfgdir/cameras.config$suffix";

# The robot machines themselves
$crane_host = "LENNON";
$user_host = "cayenne";
$arm_host = "snidely";
$re_vision_host = "yeltsin";
$re_base_host = "WOLVERINE";
$centralhost = "khrushchev";
$centralhost_outside_firewall = "lennon";
$experimentor_host = "khrushchev";
$mrhost = "khrushchev";

# Beware of using this!  We're sourcing the config whenever we start
# claw, no matter _where_ we start claw!
$local_host = `hostname -s`;
chop $local_host; # remove trailing newline
$display = "$local_host:0.0";
$target_os = "Linux-2.4";

$external_dir = "${dirroot}/external";
$external_bindir = "$external_dir/bin/$target_os";

# Extra arguments for proceses, depending on mode:
#   kremlinArgs: added to the end of kremlin's argument string
#   kremlinExpArgs: added to the end of kremlinExp's argument string
#   leaderArgs: added to the end of leaderSquare's argument string
#   rovingEyeEArgs: added to the end of rovingEyeE's argument string
#   samanEDep: added to the end of samanE's dependency string (FOR
#     requires fewer dependencies)
#
# Pure teleoperation via Kremlin and the SpaceMouse
if($autoMode eq "teleop") {
  $kremlinArgs = "--teleop $cfgdir/kremlin.teleop.config$suffix --force-enable-shortcuts";
  $kremlinExpArgs = "--teleop $cfgdir/kremlin.teleop.config$suffix";
  @kremlinDep = ("visTeleOp", "central", "rovingEyeE", "mobileManipulatorE", "craneE");
  $leaderArgs = "--teleoperate";
  $rovingEyeEArgs = "--tracking-on global";
  @samanEDep = ("mobileManipulatorB", "rovingEyeB", "craneB");
  $craneSuffix = $suffix;
}
#SIA exps taping
elsif($autoMode eq "sia") {
  $kremlinArgs = "--teleop $cfgdir/kremlin.teleop.config$suffix --force-enable-shortcuts";
  $kremlinExpArgs = "--teleop $cfgdir/kremlin.teleop.config$suffix";
  @kremlinDep = ("visTeleOp", "central", "rovingEyeE", "mobileManipulatorE", "craneE");
  $leaderArgs = "--teleoperate";
  $rovingEyeEArgs = "--watch";
  @samanEDep = ("mobileManipulatorB", "rovingEyeB", "craneB");
  $craneSuffix = $suffix;
}
# Mixed Initiative
elsif($autoMode eq "mixed") {
  $kremlinArgs = "";
  $kremlinExpArgs = "";
  @kremlinDep = ("visTeleOp", "central", "rovingEyeE", "mobileManipulatorE", "craneE");
  $leaderArgs = "--useUserModel";
  $rovingEyeEArgs = "--tracking-on global";
  @samanEDep = ("mobileManipulatorB", "rovingEyeB", "craneB");
  $craneSuffix = $suffix;
}
# System Initiative
elsif($autoMode eq "system") {
  $kremlinArgs = "";
  $kremlinExpArgs = "";
  @kremlinDep = ("visTeleOp", "central", "rovingEyeE", "mobileManipulatorE", "craneE");
  $leaderArgs = "--useUserModel";
  $rovingEyeEArgs = "--tracking-on global";
  @samanEDep = ("mobileManipulatorB", "rovingEyeB", "craneB");
  $craneSuffix = $suffix;
}
# Frame Of Reference experiments
elsif($autoMode eq "for") {
  $kremlinArgs = "--force-enable-shortcuts";
  $kremlinExpArgs = "";
  @kremlinDep = ("visTeleOp", "central", "rovingEyeE");
  $leaderArgs = "--teleoperate";
  $rovingEyeEArgs = "--tracking-on global";  
  @samanEDep = ();
  $craneSuffix = ".lahiatt.trunk";
}
# Default to autonomous mode
else { # $autoMode eq "autonomous"
  $kremlinArgs = "";
  $kremlinExpArgs = "";
  @kremlinDep = ("visTeleOp", "central", "rovingEyeE", "mobileManipulatorE", "craneE");
  $leaderArgs = "";
  $rovingEyeEArgs = "";
  @samanEDep = ("mobileManipulatorB", "rovingEyeB", "craneB");
  $craneSuffix = $suffix;
}


if($layers_on_k) {
    $re_layer_host = "khrushchev";
    $mm_layer_host = "khrushchev";
    $cr_layer_host = "khrushchev";
    $sa_layer_host = "khrushchev";
} else {
    $re_layer_host = "yeltsin";
    $mm_layer_host = "snidely";
    $cr_layer_host = "LENNON";
    $sa_layer_host = "cayenne";
}

######################################################################
# Each process has the following set of variables; all are optional
#   except cmd.
######################################################################
# host:        where to run a given process
# cmd:         command line to run
# working_dir: working directory to run within
# env:         a hash of environment variables to set before running cmd
# ready:       the string that, when printed, indicates the process
#                has started up
# depends:     a vector of processes that must be running before we start
# log_file: the name template is filled in as follows:
#   %n   replaced with process name
#   %u   replaced with a 4-digit number that makes the filename unique

# Default setup for all processes; override below
%d = ( 
       host => $centralhost,
#      cmd => "touch",
       working_dir => $bindir,
       env => { 
	   CENTRALHOST => $centralhost,
	   DISPLAY => $display
       },
#      ready => "",
#      depends => [""],
       log_file => "${datadir}/%n_%u.log"
       );

# main config setup
$MR_CONFIG = 
{
    # Delimiter for groups and processes needs to be [] for order
    #   to be preserved!
    groups => [
        layers => "mobileManipulatorB mobileManipulatorE rovingEyeB rovingEyeE craneB craneE samanB samanE",
        demo => "leaderSquare visTeleOp visTeleOpExp kremlin kremlinExp taskLogger mobileManipulatorB mobileManipulatorE rovingEyeB rovingEyeE craneB craneE samanB samanE",
        demoNoLeader => "visTeleOp visTeleOpExp kremlin kremlinExp taskLogger mobileManipulatorB mobileManipulatorE rovingEyeB rovingEyeE craneB craneE samanB samanE",
        leader => "leaderSquare",
        FOR => "rovingEyeE craneE samanE reconTester",
    ],

    # todo: figure out how to case on a $dosim variable within this datastructure
    processes => [
        ######################################################################
        #  BEGIN SERVICES
        #    Services are programs that will very very likely not be changed
        #    on a per-user basis, and hence aren't handled by deploy.sh
        ######################################################################
         central =>           { %d, 
				cmd => "./central -lmsi",
				working_dir => "$external_bindir",
				ready => "Expecting 1 on port" },
         CTPan =>             { %d, 
			        cmd => "./CTPan -x",
                                host => "$re_vision_host",
                                working_dir => "/usr/local/robot/bin.ipc",
                                depends => ["central"], #xavCentral
                                env => {
                                        CENTRALHOST => $centralhost, #$re_vision_host,
                                        DISPLAY => $display
                                       },
                                #ready => "CTP>"
                                ready => "[r|reset]"
			      },		
 	 ctrXavier =>         { %d, 
			        cmd => "./CTR -l",
                                host => "$re_base_host",
                                working_dir => "/usr/local/robot/bin.ipc",
                                depends => ["central"], #xavCentral
                                env => {
                                        CENTRALHOST => $centralhost, #$re_vision_host,
                                        DISPLAY => $display
                                       },
                                #ready => "CTR>"
                                ready => "RT: Reaction time for forward/backward moves (dflt 0.75 secs)"
			      },
         imageServer =>       { %d, 
			        cmd => "./imageServer",
                                host => "$re_vision_host",
                                #depends => ["central"],
                                ready => "Ready to serve images"
			      },
         visTeleOp =>         { %d,
                                cmd => "./visTeleOp$suffix",
                                host => "$user_host",                                
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => ":0.0"
                                       },
                                depends => ["central", "craneB", "rovingEyeB"],
                                },
         visTeleOpExp =>      { %d,
                                cmd => "./visTeleOp$suffix",
                                host => "$experimentor_host",                                
                                env => { 
                                        CENTRALHOST => $centralhost,
                                        DISPLAY => ":0.0"
                                       },
                                depends => ["central", "craneB", "rovingEyeB"],
                                },
         sentinel =>          { %d, 
			        cmd => "./sentinel",
                                host => "$re_vision_host",
                                depends => ["imageServer"],
                                log_file => "",
                                ready => "Sentinel",
                                backup_kill_cmd => ""
			      },
         yakTester =>        { %d,
                                cmd => "./yakTester$suffix",
                                host => "$user_host",
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => $display
                                       },
                                depends => ["yakKhru", "yakCay", "yakXavier"]
                              },

         yakKhru =>          { %d,
                                cmd => "./yak$suffix -d $wavdir -a all",
                                host => "$centralhost",
                                depends => ["central"]
                              },
         yakCay =>           { %d,
                                cmd => "./yak$suffix -d $wavdir -a all",
                                host => "$user_host",
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => $display
                                       },
                                depends => ["central"]
                              },
         yakXavier =>         { %d,
                                cmd => "./yak$suffix -d $wavdir -a rovingEye1",
                                host => "$re_vision_host",
                                depends => ["central"]
                              },
 	 ctrBull =>           { %d, 
			        cmd => "./ctrBull$suffix --Config=$cfgdir/ctr.config$suffix",
                                host => "$arm_host",
                                log_file => "",
                                depends => ["central"],
                                ready => "Enabling status broadcasts"
                                #ready => "CTR>"
                                #ready => "st <n>: toggle working state of sonar n"
			      },
         whip =>              { %d,
                                cmd => "./whip$suffix -l",
                                host => "$arm_host",
                                log_file => "",
                                depends => ["ctrBull", "central"],
                                ready => "Start...",
				kill_cmd => "kill -15 %p"
                              },
         whipClient =>        { %d,
                                host => "$user_host",
                                cmd => "./whipClient$suffix",
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => $display
                                       },
                                depends => ["whip"]
                                },
         recon =>             { %d,
				host => "$user_host",
                                cmd => "./recon$suffix",
				env => {
				    CENTRALHOST => $centralhost_outside_firewall,
				    DISPLAY => "$user_host:0.0"
				 },
                                depends => ["central"],
                                ready => "Initialization complete"
                              },
         hatchet =>           { %d,
                                cmd => "./hatchet$suffix --logfile /tmp/hatchet.log --fadeout 2", # -u Brennan
                                host => "$user_host",
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => $display
                                       },
                                depends => ["central"],
                                ready => "Chop, chop!"
                              },
         kremlin =>           { %d,
                                cmd => "./kremlin$suffix -m $centralhost_outside_firewall:1382 $kremlinArgs",
                                host => "$user_host",
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => ":0.0"
                                       },
                                depends => [@kremlinDep],
                                ready => "Initializing system"
                              },
         kremlinExp =>        { %d,
                                cmd => "./kremlin$suffix -e -u dummy -m $centralhost_outside_firewall:1382 $kremlinExpArgs",
                                host => "$experimentor_host",
                                env => { 
                                        CENTRALHOST => $centralhost,
                                        DISPLAY => ":0.0"
                                       },
                                depends => ["visTeleOpExp", "central"]
                                #ready => "Initialized"
                              },
         taskLogger =>        { %d,
                                cmd => "./taskLogger$suffix",
                                host => "$centralhost",
                                depends => ["central"]
                              },
         switcher =>          { %d,
                                cmd => "./switcher$suffix",
                                depends => ["central"],
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => $display
                                       },
                                host => "$user_host",
                                ready => "Ready"
                              },
	 # This needs to have lennon xhost +localhosted before it'll
	 #  work.  I've added that to lennon's /etc/init.d/rc.local; not
	 #  entirely sure if that'll do the job.
         spaceMouseDriver =>  { %d,
				host => "$user_host",
                                cmd => "/usr/magellan/xdriver",
				env => {
				    CENTRALHOST => $centralhost_outside_firewall,
				    DISPLAY => ":0.0"
				 },
                                ready => "Display = "
                              },
         reconTester =>       { %d,
                                cmd => "./reconTester$suffix",
                                host => "$user_host",
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => $display
                                       },
                                depends => ["kremlin"]
                              },
         observer =>          { %d,
			        cmd => "./observer$suffix",
                                env => { 
                                        CENTRALHOST => $centralhost_outside_firewall,
                                        DISPLAY => $display
                                       },
                                host => "$user_host"
			      },
        ######################################################################
        #  BEGIN LAYERS
        #    These are the various behavioral and executive layers; they will
        #    very likely vary on a per-user basis.
        ######################################################################
         leaderSquare =>      { %d, 
			        cmd => "./leaderSquare$suffix -Le $bodies --start side1_right --stop side4_left --grabBeam --grabNode $leaderArgs",
                                depends => ["yakKhru", "yakCay","kremlin", "kremlinExp", "taskLogger", "samanE", "craneE", "rovingEyeE", "mobileManipulatorE"]
			      },
         rovingEyeE =>        { %d, 
			        cmd => "./rovingEye$suffix -Le $bodies --usermodel ${datadir}/userModelRovingEye${suffix}.um $rovingEyeEArgs",
                                host => "$re_layer_host",
                                depends => ["rovingEyeB", "samanB"],
                                ready => "UMT: Locked and loaded.  Let's rumble!"
			      },		
         rovingEyeB =>        { %d, 
			        cmd => "./rovingEye$suffix -Lb -x --fidbits 5 $bodies $cameras",
                                host => "$re_vision_host",
                                depends => ["central", "ctrXavier", "CTPan", "imageServer"], #"xavWinManager, xavCentral
                                env => { 
                                        CENTRALHOST => $centralhost,
                                        DISPLAY => "${re_vision_host}:0.0",
                                        #TCACENTRALHOST => "$re_base_host"
                                },
                                ready => "behaviors entering IPC main loop"
			      },			      
         # initialPos options: nearPull, farPull, farPush, stow
         mobileManipulatorE =>{ %d, 
			        cmd => "./mobileManipulator$suffix -Le --initialPos stow $bodies --usermodel ${datadir}/userModelMobileManipulator${suffix}.um",
                                host => "$mm_layer_host",
                                depends => ["mobileManipulatorB", "samanB", "rovingEyeB"],
                                ready => "UMT: Locked and loaded.  Let's rumble!"
			      },			      
         mobileManipulatorB =>{ %d, 
			        cmd => "./mobileManipulator$suffix -Lb -WHIP $bodies",
                                host => "$arm_host",
                                depends => ["whip"],
                                ready => "behaviors entering IPC main loop"
			      },
         craneE =>            { %d,
                                cmd => "./crane$craneSuffix -Le $bodies --usermodel ${datadir}/userModelCrane${suffix}.um",
                                host => "$cr_layer_host",
                                depends => ["craneB", "samanB", "rovingEyeB"],
                                ready => "UMT: Locked and loaded.  Let's rumble!",
                                kill_cmd => "kill -15 %p"
                              },	
         craneB =>            { %d,
                                cmd => "./crane$craneSuffix -Lb $bodies",
                                host => "$crane_host",
                                depends => ["central"],
                                ready => "behaviors entering IPC main loop",
                                kill_cmd => "kill -9 %p"
                              },
         samanE =>            { %d,
				host => "$sa_layer_host",
                                cmd => "./SAManager$suffix -Le",
				env => {
				    CENTRALHOST => $centralhost_outside_firewall,
				    DISPLAY => "$user_host:0.0"
				 },
                                depends => ["yakKhru", "yakCay", "samanB", @samanEDep],
                              },
         samanB =>            { %d,
				host => "$sa_layer_host",
                                cmd => "./SAManager$suffix -Lb",
				env => {
				    CENTRALHOST => $centralhost_outside_firewall,
				    DISPLAY => "$user_host:0.0",
				    DIRA_PROJ_DIR => "${dirroot}/dira"
				 },
                                depends => ["central", "spaceMouseDriver"],
				ready => "behaviors entering IPC main loop"
                              }
   ]
};

######################################################################
# GRAVEYARD
#
#  These are processes that used to be defined, but aren't needed at
#  the moment.  Keep them here for reference.
        #xavX =>              { %d, 
        #                        host => "${re_vision_host}",
	#			cmd => "./XFree86",
	#			working_dir => "/usr/X11R6/bin",
        #                        env => { 
        #                                CENTRALHOST => $centralhost,
        #                                PATH => "/usr/X11R6/bin:/bin:/usr/bin:/usr/local/bin:/usr/sbin:/usr/local/sbin",
        #                                DISPLAY => ":0.0"
        #                               },
	#			ready => "Using config file:" },
        #xavWinManager =>     { %d,
        #                        host => "${re_vision_host}",
	#			cmd => "./wmaker",
        #                        working_dir => "/usr/bin",
        #                        depends => ["xavX"],
        #                        env => {
        #                                CENTRALHOST => $centralhost,
        #                                PATH => "/usr/X11R6/bin:/bin:/usr/bin:/usr/local/bin:/usr/sbin:/usr/local/sbin",
        #                                DISPLAY => ":0.0"
        #                               }
        #                       },
#        xavCentral =>        { %d,
#                                host => "${re_vision_host}",
#				cmd => "./central -lmsi",
#				working_dir => "$external_bindir",
#				ready => "Expecting 1 on port" },
#         picd =>              { %d, 
#         			cmd => "./picd -p /dev/ttyUSB0 -f $cfgdir/picd_dataSSSSSSI.aux",
#                                host => "$arm_host",
#                                depends => ["central"],
#                                ready => "PICD: HOMING COMPLETED!"
#			      },			
#         tempGUI =>           { %d,
#                                cmd => "./tempGUI$suffix",
#                                host => "$user_host",
#                                depends => ["central"]
#                              },
#         leaderE =>            { %d, 
#                                cmd => "./leader$suffix -Le",
#                                ready => "Launching Beth's GUI...",
#                                #depends => ["mobileManipulatorE", "rovingEyeE", "craneE", "leaderB"]
#                                #depends => ["mobileManipulatorE", "rovingEyeE", "leaderB"]
#                                depends => ["rovingEyeE", "craneE", "mobileManipulatorE", "leaderB"]
#			      },
#         leaderB =>            { %d, 
#                                cmd => "./leader$suffix -Lb $bodies",
#                                #depends => ["rovingEyeB", "mobileManipulatorB"],
#                                depends => ["rovingEyeB", "mobileManipulatorB", "craneB"],
#                                ready => "behaviors entering IPC main loop"
#			      },
#         leaderSimple =>      { %d, 
#			        cmd => "./leaderSimple$suffix -Le",
#                                depends => ["mobileManipulatorE", "rovingEyeE", "craneE"]
#                                #depends => ["mobileManipulatorE", "rovingEyeE"]
#                                #depends => ["rovingEyeE"]
#			      },
#         leaderReciprocity => { %d, 
#                                cmd => "./leaderReciprocity$suffix -Le --exp baseline --firstSession --launchWatch --reps 20 --tlxProb 0.5 --reacProb 0.5 --rest 30",
#                                #depends => ["mobileManipulatorE", "rovingEyeE", "craneE", "samanE", "recon"]
#				depends => ["mobileManipulatorE", "rovingEyeE", "samanE", "recon"]
#			      },

######################################################################
# DO NOT EDIT BELOW THIS POINT

# tell perl to look for printConfigFile.perl in the user's path
@INC = split /:/, $ENV{PATH};

unshift(@INC, '${dirroot}/external/mraptor/software/bin/common');
unshift(@INC, $ENV{HOME} . '/dira/software/external/mraptor/software/src/microraptor/daemon/');
unshift(@INC, '/home/line/projects/microraptor/software/bin/linux2');
unshift(@INC, '/afs/cs/project/dira/software/external/microraptor/software/bin/common');
unshift(@INC, '/usr/local/lib/perl5/5.6.1/');
require "printConfigFile.perl";
&print_main($MR_CONFIG);


######################################################################
# $Log: trestle.config,v $
# Revision 1.7  2005/09/01 16:05:15  brennan
# Various and sundry tweaks having to do with the experiments.
#
# Revision 1.6  2005/08/15 21:36:49  brennan
# Config file for Kremlin teleop task checklist.
#
# Revision 1.5  2005/08/12 17:53:52  brennan
# Added samanE entry with no behavioral layer dependencies besides samanB.
# Added FOR group for (heh :-) use in the Frame Of Reference experiments.
#
# Revision 1.4  2005/08/08 00:01:47  brennan
# Final commit of Nalin's summer work.  Many scattered changes.
#
# Revision 1.3  2005/07/21 18:10:07  bhamner
# *** empty log message ***
#
# Revision 1.2  2005/07/19 17:41:48  brennan
# Fixed kooky make problem with unmatched '.
#
# Revision 1.1  2005/07/18 22:12:57  brennan
# Reworked make system to automatically build for multiple architectures on
# multiple machines and deploy binaries, configs, and scripts across the
# team.  See ReferenceMaterial/README.building for details.
#
# Revision 1.24  2005/02/08 20:52:32  brennan
# Many many tweaks for the experiments and to support additional pose
# data to the visualizer.
#
# Revision 1.23  2005/01/31 19:01:54  brennan
# Added a couple new groups.
#
# Revision 1.22  2005/01/24 14:32:33  brennan
# Various bugfixes.
#
# Revision 1.21  2004/11/11 21:28:48  brennan
# VisualSearch switching now works.
# User model is close, but not complete.  VisualSearch should properly
# query modelling task.
# Many other tweaks, including spacemouse hookups to PTU, Xavier base,
# Bullwinkle base, and GUI.
#
# Revision 1.20  2004/10/14 17:12:35  brennan
# Foo.  The 4-beam demo now works swimmingly.
#
# Revision 1.19  2004/10/06 21:13:26  brennan
# Various tweaks to the 4beam demo.  This version seems to work pretty well.
# I'm going to do some more testing, then freeze the code for the 25th
# anniversary demo.
#
# Revision 1.18  2004/09/28 00:14:52  brennan
# *** empty log message ***
#
# Revision 1.17  2004/09/24 20:58:10  brennan
# 4beam demo pretty much working; some problems with rotationally-off docks
# being detected as stucks.
#
# Revision 1.16  2004/09/12 02:11:54  brennan
# Demo almost working - some callback guarding to finish.
# Interim commit.
#
# Revision 1.15  2004/09/10 00:13:09  brennan
# Everything compiles, except hatchet.
# Interim commit.
#
# Revision 1.14  2004/09/09 00:29:29  brennan
# Interim commit, fixing allocate/deallocate bugs.  May not run correctly.
#
# Revision 1.13  2004/09/06 20:10:19  brennan
# *** empty log message ***
#
# Revision 1.12  2004/09/03 21:00:28  brennan
# *** empty log message ***
#
# Revision 1.11  2004/08/31 19:57:17  brennan
# *** empty log message ***
#
# Revision 1.10  2004/08/31 02:10:16  brennan
# *** empty log message ***
#
# Revision 1.9  2004/08/23 17:26:26  brennan
# *** empty log message ***
#
# Revision 1.8  2004/08/11 20:31:46  brennan
# *** empty log message ***
#
# Revision 1.7  2004/08/09 14:13:31  brennan
# *** empty log message ***
#
# Revision 1.6  2004/08/03 19:13:22  brennan
# Docking both ends of one beam works.  Full 4-beam demo likely works.
#
# Revision 1.5  2004/07/30 17:37:14  brennan
# *** empty log message ***
#
# Revision 1.4  2004/07/28 14:58:33  brennan
# Compiling and running on khruschev.  WatchTask and various RovingEye
# tasks tested, nothing else tested.
#
# Revision 1.3  2004/07/26 18:07:23  brennan
# *** empty log message ***
#
# Revision 1.2  2004/07/21 16:52:36  brennan
# *** empty log message ***
#
# Revision 1.1  2004/07/21 16:28:23  brennan
# *** empty log message ***
#
# Revision 1.13  2004/06/24 19:19:00  brennan
# Added ./ to handle case where "." is not in path.
#
# Revision 1.12  2004/06/10 20:26:19  brennan
# *** empty log message ***
#
# Revision 1.11  2004/06/10 17:46:46  brennan
# Added necessary comma.
#
# Revision 1.10  2004/06/10 16:37:00  brennan
# *** empty log message ***
#
# Revision 1.9  2004/06/09 15:59:19  brennan
# Converted number of fiducial bits to be a commanline argument to rovingEyeB
#
# Revision 1.8  2004/06/03 17:37:06  brennan
# *** empty log message ***
#
# Revision 1.7  2004/04/06 20:58:29  brennan
# Fixed localhost bug.
#
# Revision 1.6  2004/04/06 20:16:25  brennan
# *** empty log message ***
#
# Revision 1.5  2004/04/06 20:13:13  brennan
# Added to INC looking for printConfigFile.perl
#
# Revision 1.4  2004/04/01 22:40:23  brennan
# Added comment to TDL files to make Emacs color-code them as C++ files.
#
# Revision 1.3  2004/03/22 06:42:40  brennan
# Mucking about with getting the spacemouse to work.
#
# Revision 1.2  2004/03/22 04:34:00  brennan
# Merged TDLizing branch with trunk, resolved conflicts.
#
# Revision 1.1.2.6  2004/03/21 20:41:43  brennan
# *** empty log message ***
#
# Revision 1.1.2.5  2004/03/12 19:55:21  brennan
# This should work on the real hardware now.  Haven't yet tested it there.
#
# Revision 1.1.2.4  2004/03/12 18:55:22  brennan
# *** empty log message ***
#
# Revision 1.1.2.3  2004/02/18 02:24:47  brennan
# Making things work on the hardware.
#
# Revision 1.1.2.2  2004/02/12 20:25:37  brennan
#
# Fixed dumb typo.
#
# Revision 1.1.2.1  2004/02/12 02:02:40  brennan
# Split microraptor.config into sim and live versions.
#
# Revision 1.7.2.8  2004/02/06 21:15:29  brennan
# Servoing now working, although it crashes after completion (in AttachmentRef
# destructor).
#
# Revision 1.7.2.7  2004/01/29 17:37:47  brennan
# ReadBodies and all calls to it now support the freespace extension.
#
# Revision 1.7.2.6  2004/01/28 20:19:11  brennan
# VisualServo now sort of works - arm moves, but not correctly.
#
# Revision 1.7.2.5  2004/01/23 21:43:58  brennan
# Removed framelength foo from sim entry.
#
# Revision 1.7.2.4  2004/01/23 20:07:18  brennan
# *** empty log message ***
#
# Revision 1.7.2.3  2004/01/22 19:46:05  brennan
# Fixed path for printConfigFile.perl
#
# Revision 1.7.2.2  2004/01/13 21:50:02  hkcho
# *** empty log message ***
#
# Revision 1.7.2.1  2004/01/07 21:18:21  brennan
# WatchTask is now working under TDL.
#
# Revision 1.7  2003/12/23 18:24:16  brennan
# Should work stand-alone on AFS now.
#
# Revision 1.6  2003/09/17 19:14:01  brennan
# Many many changes, most related to TDLizing the exec layer.
# A good chunk have not been tested, due to my laptop's stupidness.
#
# Revision 1.5  2003/08/04 16:17:41  jonb
# GCC 3.2 modifications.
#
# Revision 1.4  2003/06/30 14:29:47  brennan
# Various edits; increased fiducial sizes, added --tracking-on to RovingEye,
# which turns on the tracking block as soon as the executive comes up.  Also
# added --watchTaskOnly and --simTesting to LeaderAgent (which run only
# small subsets of the whole leader task tree).
#
# Revision 1.3  2003/06/18 22:19:24  brennan
# Munged to work on AFS.
#
# Revision 1.2  2003/06/18 14:09:36  brennan
# Almost in shape for general use on AFS (and Brennan's laptop).
#
# Revision 1.1  2003/06/11 20:58:07  brennan
# Initial commit, config file for DIRA system under microraptor startup
# system.
#
# Revision 1.1  2003/06/04 16:13:36  challenge
# Single microraptor config file for whole system, initial commit.
#
# Revision 1.8  2002/07/31 05:11:16  brennan
# Enter Slashland!
#
# Revision 1.7  2002/07/31 04:50:07  curmson
# fixes to get startup to run
#
# Revision 1.6  2002/07/30 16:52:48  brennan
# Xterms are now color-coded by module (aka startup file).
#
# Revision 1.5  2002/07/30 06:10:58  brennan
# Updated to allow killing of startup-xterms on a by-startup file basis.
#
# Revision 1.4  2002/07/29 02:38:15  brennan
# Fiddle fiddle fiddle.
#
# Revision 1.3  2002/07/23 18:20:11  challenge
# Final commit before disassemble.
#
# No disassemble!
#
# Revision 1.2  2002/07/22 21:20:53  brennan
# Fixed up the mishmash of variables so pretty much everything lives in
# the LOCAL or ROBOT hashes.  These have /not/ been tested in real life yet!
#
# Revision 1.1  2002/07/21 20:55:16  brennan
# Initial commit of startup files galore.
#
# Revision 1.8  2002/07/21 16:56:24  brennan
# Pointed to startup-xterm in startup directory.
#
# Revision 1.7  2002/07/17 19:01:24  brennan
# Fiddled with startup options.
#
# Revision 1.6  2002/07/16 17:03:46  brennan
# Just a bit of tweaking.
#
# Revision 1.5  2002/07/16 17:00:21  brennan
# Added killCmd option for specialized killing of processes (needed for
# ViaVoice shutdown).
#
# Revision 1.4  2002/07/15 23:13:41  brennan
# New example file, fixed some problems with registration startup.
#
# Revision 1.3  2002/07/12 22:02:34  brennan
# Fixed a few more typos; it now works (at least as brennan :).
#
# Revision 1.2  2002/07/12 21:21:12  brennan
# Fixed some dumb mistakes
#
# Revision 1.1  2002/07/12 21:07:27  brennan
# First stab at startup file for the registration interaction processes.
#
# Revision 1.1  2002/07/12 20:40:14  brennan
# Import of FIRE's startup script.
#
# Revision 1.5  2001/11/19 18:29:35  trey
# added sim to STARTUP_MODULES
#
# Revision 1.4  2001/11/19 16:32:17  trey
# cosmetic changes and improved comments
#
# Revision 1.3  2001/11/19 16:17:14  trey
# minor improvements
#
#
